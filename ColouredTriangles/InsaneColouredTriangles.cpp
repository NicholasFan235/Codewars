#include <bits/stdc++.h>

std::vector<int> f3 = {1, 1, 2, 6};
std::map<char, int> charMap({ {'R', 0}, {'G', 1}, {'B', 2} });
std::array<char, 3> intMap = {'R', 'G', 'B'};

int nCrMod3(int n, int r){
    int nr = ((n-r)%3+3)%3;
    return f3[n] / (f3[nr]*f3[r]) % 3;
}

int nCr3(int n, int r){
    if (r==0) return 1;
    int ni = n%3, ri = r%3;
    return (nCr3(n/3, r/3) * nCrMod3(ni, ri)) % 3;
}

char triangle(const std::string &r){
    long long n = r.length();
    int ans = 0;
    for (long long i = 0; i < n; i++){
        ans += nCr3(n-1, i) * charMap[r[i]];
        ans = ans%3;
    }
    std::cout << "ans = " << ans << std::endl;
    if (n % 2 == 0){
        // odd number of levels
        ans = 3-ans;
        ans %= 3;
    }
    return intMap[ans];
}

std::vector<std::string> queries = {
    "B",
    "GB",
    "RRR",
    "RGBG",
    "RBRGBRB",
    "RBRGBRBGGRRRBGBBBGG",
    "BRBBGGBBGBBBRGBGBRRGRBRRGGBBGRRGGBGBBGBGGBRGRRRRGGRGRRRGGBGRRBBBBGGGRBGBGGRBBGRRBRRRRRRGRGBBRBGRGRBGRRGBRRBBBRRBRGRGGRRRBRBRRRRBGGGGGRGGGRGRRRBBGGRGGGGGGRBBGRGRGRBRGGBBRGBGBRRRGGBRRRBBGBBRBGGGBRBRRBRRGGGRGRGRGRGGBRGRRRGGBRRBBBBBGGRRBGGRBBGGGBBRGGGGBGBBGRGRBGRBBRRGRGBBBGRRGGGRBRBBGRBGRRBGBRRBGGGGRBGBRBRBGGBGBBGGRRBRGRGRRBBBRBGBGRGGRBBBGGRGGBRGBRRRRGRGBGGRGRBBRGGRGRBBRRBBBBBBRBBBGGRGRBBGBGRBBBGGRGBGBGRBGRBGRGRBBBRBGBGGBGGBGBGBGRGGBGRRRBBRGGRGRGBBGRRGRRGBBBGGRBBBGRBGBBRGRRGGBGGBGBRBBGGBGRGGBGRBBRGBRGGRBRRGGGRRRGRRRGRBBBRBRGGRBRRBGGGGGGRRRGRRBRGGRBRBBRGRBGGRBGBGRGRBBRBBGBGBGRRGRGRRGBRBGGBRRBBGGBRGRRBBRRGGGBBBRRBRRGRBRRBGBBBGBGRBGBBBRGRBBRBBGGRBRRGGGGBGGBRGRRGRRGBGRGGBBRBGBRRRBBBRGGBRGRBRGRRBBRRBGBBGRBRGRRGBRRRGBRBGRGGRBBBGRRGGGRRGRRBGRGGGBBRBRBGGGRGGRGBRBGGGRBBRBRBGGGBBRRGRRBRGRGBRRBRRGBGBBRRRGRBRBGBBRGGRGGRBRRRRGGGRGBBGGBGBBRRBBRBRBGGGRBRRBGBGBRGRGRGRGRRRGGRBGRBGBGBBRBRGRBRRGBGRRRRGBGRRBGRBGRGRBGRRGRBRGRRRBBRRGGGRBBGRRRRGRGBBBRRGGRBRGBRGRGBGBGBBRGBBGBRBGGRRGRBRBGRGBRBBBBGGGGGBRGGRGRBRBRRGBGBGBRRBBBBGBRRGBBBRRGGBBGBGBGRGBRRBRRBBRBGGRBBRBBGBGBRGGBGRRGBRBBRBRRRRBBGRGBGRBBRGRRRGRGBGRBBRBRBBRRRRBRGGBRGBRRGRRBBGRBRGGBGGBGRRBGRBGBGGRRGGRBBGGRRBBRRBRBRRGBRGRBRBBGGRBBBRRGGGGBBBRBGGBBBGGGBBRBBRBGRBGRBGBBRGGBGBRRGRRGGBBRRRRBRBGBGRBGBBRBBBRRBRGGRGRBGRRGRRGGGRGRRBGRGBBRBRGBRRGGGGGBBGBRBGBGGGGBRGBBRBGGRBGGBBGGGBGRGRGGBRRRGGRBBRBGRRRGRGRRRGBBBGRGRGBBGBRGGGRBBRRBGGGGBBBRBGRGRRBGBBRGBGBRRGBBBRBGGGRGRRGBBGGRBRGGRBRBRRGGBGRBBBGGRGGBBRGBRRRBGBBRBRRRGGBGRRGRGBBGRRRGGRRGGRGRRRRRGGGRRGBRGRRBBRBRRRGBRBRBGRRBRGRRRGRGRBGBRRBRGBRBBRBGRRGBRBBBGBBBGBRGBRGBRRBBRRGGGGBRRRBRGGRBGBGRBRBBRGGGBGGRRBGBBGBBBRRRBGRGGRGGRBGGRRBBBGRRRGRRRBBRRGRRBBBGBGBBRGGRBGGBBGRRRRGRRGGGBRBBBGGGBGGRRBRRRGRBRGBGBGBBRBGRBRRGBBBBRGBBRRBRRRRGGRRRBBGRGBRRGGBRRBRBRBGRGRGGGBBRRRGBBBBBBRRGBRRBRRBGRRGBBGRGRRGGRBGRBGRBBBGGRGGRBGGRBGBGRRBGGGRBGGRBRGBBGRGGBBBGGGBGRGBRBRBRBBRRGRBBBBBRRRBBRBGBGGRBBRRBRBRRBRBGRBGGBRBBRBBRBGBGBRRGBGGBRGGRGRBBBRRGRRRGRRBRGBGRRBBRRRBGGGBRGBRGRRBGGGRBGBBRBRRRRRRRGGBRBBRGBGBRRBBGGBGRBRGBBBRBBRGBBGRBGRRRRRGRRGGBGRBGBGRGRRGGBBRGGRGBGGRGBBGRRGRGGBBGGRBGGBBGBBRGRBRBRGRGRRBRGBBRBBBRRBGBBGGBGGRBRGGBRBRRRRBBBBRGBRGRRRRRBGBGBRRRGBRGBGRRGRBRBRBBRGBGGRBGGBRGRGBGRBGBRBRGBRBBRGBBRBGGRRRGBRRBGBGBGRRBBRGBRRBBBBGBGBBBBBBBGBBRBGRGRRBBRRRBGBGGBBGGBRGGRGGGRGBRBRRBRBRGBGRGGBRRBGGGBRRBGBBBRBRGBRGRBGGRRRGGBGGBRGGRGBGRGRRBRGGBRBBBBGRBGBGBGRBRGRRGBGBBBRBBGRBGBBBGGBBRBRBBGGBRBBBBBGGGGRBBRGBGGGBRGBRGBGRBBBBBBBBGRGGGBRRRBRGGGBGRGRBBGRGGBGGBRGBRBRGBGBRGRGRBGBBRBBBGBRRBBGBBBBRBRGBGGBBBGRBRRBGRRRBBGBRGGRRGBRRBBBGGBGBGBGBRGRRGGBBRBBGRBGGBBRGBBBRRRBGRGGRGBGRRGBRBBGBGRBRRBBBBGRBRGGGRRBGBGBBRBRBBBRGRRRRBBRBBBRBRGRGRRRBGRRRBGBBGRGBRGGRRGRBRGBGRGRRBGRBGGBGBBGGRRGRBBGBRBRBRRGRBBGBRBGBRGBBRGBRGRGGBRRRRGRRRRGBBRGGBRGRGRGBBRRGRBBRBGRRBBRRBRRBRBRGGRGBGBBGRRBRRRGGGBGGBRBGRRRGBBBRBGGRGGBBBRRRRBGBBBRGBRRRRGBRGGGGRRRRBBBGBRGRRBBBRRGRRGGGGRBBBGGGBGGGRGBGGBGBGBBBBGRRRGBGBGGBGRRRGGGBBGGBGGBGRGRBRRRGBRRBBBBRBRRGRBBRBRBRGBGGBRGBRBGGRBRBBRGBGBRGRRGRGBRBGRBRRRGGRBRGBGBBGRBRRRBRGBRBBBBRRBBGGGRGGGRGBRGGRGRRGBBBBRBGBRBRBBGRGBRBGGGGGBBBRRBRRBRBRGGBGGGGGBBBBRGRGRGRRBBBBBRRBRGBGRGRBRBRRBRRBBBGRGGBGGGBRGRBBGGBBGBGGGBBGRRGRRBGBGRGBBRGGRRGRBRBGRBBRGBGRRRRGRBRRRGRRBGBRBGRBGRRBBBBBBGBRBRGRRRRRGBBGRGBRRRBGGRGGRGGRRGBBGRRGGGRRGBBBGBRGRRRGGGBBRGBRBGBGRRGBBBRRBRBRBRBBGRGBBGGRGGRRGRBBGGGGRBBBBGBRRBBGBGGGGRGBGBRRRRBBGBRGGBRGGRGGBBRBGGGRGRBGRGBGGBRRBRGGBBBGBBRRGGBRRGGRBGBRBGBGGBGRRRGRBBBRGRRRBRRBBGRBGBBRGGBRGGGBBRBBBBRRRGRRBBRGGGRBGRGBBRRRRBBRBBRBBGRRBBRBGGGRRBRGRBBBBRRRBRRBBBBRRRRRRGRGRBGGBBBBGGGBGBRGBGGGGRGGGRBGGRRBRRRBBBGBBRGGBGRBRBGGBGRGGRBRGRBGRRRRRBBBRGBRGBBBBGBGBBRGRRGBGRGBGBBGBRBRGGGRGGRRRBGBGBRRRBRBRGGGGGBGGGBGRRGGBBBBGGBGGRGBBBBBRRRBBGGBRGGGBRBBRBBGGBBRBGRRRBBGRGGBBRBBGRRRGGRGGRBRBRRBGGBRRRBGGRRGGGRBGBRRRGGBGBBGBRGGGBGGBGBGGRRBGRBGRRGGGGRRRBBRRRBGBGRBBRGBGGBRRRBRRGBBRRRRGBGGBRRRBRRRBBRRGBGGRBRGRRRGRGGGRRGGRGGRBBGGGGBGGBBBGBRBBBRGRBRBRGRRRBGRGBBRGRGRRGRBBGBBRRRBBGGRBGRRRRGBRGBBBGRRGGRRBBBGBGRBRBBRRGGGGBGBBGBBRRGGGGBGBRBGBRBBBBBBRGGBGBRGGBBRRRBGBRRGRBGBBRBGBGGGBRGBGGRRGBRGRGRRGBBBGRBBGGGGRGRRBGRGRRBGRRRGBGGRRGRRBBRGRBRGRRBGBBBBRGGGRBRBGBGBGGRGBRBBRRGGGGBRGBRBGBG",
    
};

int main(){
    for (const auto q : queries){
        std::cout << triangle(q) << std::endl;
    }
}
