import math


f3 = [1, 1, 2, 6]
charMap = { 'R': 0, 'G': 1, 'B': 2 }
intMap = ['R', 'G', 'B']


def nCrMod3(n, r):
    nr = ((n-r)%3+3)%3
    return math.floor(f3[n] / (f3[nr]*f3[r])) % 3

def nCr3(n, r):
    if (r==0):
        return 1
    ni = n%3
    ri = r%3
    return (nCr3(math.floor(n/3), math.floor(r/3)) * nCrMod3(ni, ri)) % 3

def triangle(row):
    n = len(row)
    ans = 0
    for i in range(n):
        ans += nCr3(n-1, i) * charMap[row[i]]
        ans = ans%3
    if n%2==0:
        ans = 3-ans
        ans = ans%3
    return intMap[ans]

queries = [
    "B",
    "GB",
    "RRR",
    "RGBG",
    "RBRGBRB",
    "RBRGBRBGGRRRBGBBBGG",
    "BRBBGGBBGBBBRGBGBRRGRBRRGGBBGRRGGBGBBGBGGBRGRRRRGGRGRRRGGBGRRBBBBGGGRBGBGGRBBGRRBRRRRRRGRGBBRBGRGRBGRRGBRRBBBRRBRGRGGRRRBRBRRRRBGGGGGRGGGRGRRRBBGGRGGGGGGRBBGRGRGRBRGGBBRGBGBRRRGGBRRRBBGBBRBGGGBRBRRBRRGGGRGRGRGRGGBRGRRRGGBRRBBBBBGGRRBGGRBBGGGBBRGGGGBGBBGRGRBGRBBRRGRGBBBGRRGGGRBRBBGRBGRRBGBRRBGGGGRBGBRBRBGGBGBBGGRRBRGRGRRBBBRBGBGRGGRBBBGGRGGBRGBRRRRGRGBGGRGRBBRGGRGRBBRRBBBBBBRBBBGGRGRBBGBGRBBBGGRGBGBGRBGRBGRGRBBBRBGBGGBGGBGBGBGRGGBGRRRBBRGGRGRGBBGRRGRRGBBBGGRBBBGRBGBBRGRRGGBGGBGBRBBGGBGRGGBGRBBRGBRGGRBRRGGGRRRGRRRGRBBBRBRGGRBRRBGGGGGGRRRGRRBRGGRBRBBRGRBGGRBGBGRGRBBRBBGBGBGRRGRGRRGBRBGGBRRBBGGBRGRRBBRRGGGBBBRRBRRGRBRRBGBBBGBGRBGBBBRGRBBRBBGGRBRRGGGGBGGBRGRRGRRGBGRGGBBRBGBRRRBBBRGGBRGRBRGRRBBRRBGBBGRBRGRRGBRRRGBRBGRGGRBBBGRRGGGRRGRRBGRGGGBBRBRBGGGRGGRGBRBGGGRBBRBRBGGGBBRRGRRBRGRGBRRBRRGBGBBRRRGRBRBGBBRGGRGGRBRRRRGGGRGBBGGBGBBRRBBRBRBGGGRBRRBGBGBRGRGRGRGRRRGGRBGRBGBGBBRBRGRBRRGBGRRRRGBGRRBGRBGRGRBGRRGRBRGRRRBBRRGGGRBBGRRRRGRGBBBRRGGRBRGBRGRGBGBGBBRGBBGBRBGGRRGRBRBGRGBRBBBBGGGGGBRGGRGRBRBRRGBGBGBRRBBBBGBRRGBBBRRGGBBGBGBGRGBRRBRRBBRBGGRBBRBBGBGBRGGBGRRGBRBBRBRRRRBBGRGBGRBBRGRRRGRGBGRBBRBRBBRRRRBRGGBRGBRRGRRBBGRBRGGBGGBGRRBGRBGBGGRRGGRBBGGRRBBRRBRBRRGBRGRBRBBGGRBBBRRGGGGBBBRBGGBBBGGGBBRBBRBGRBGRBGBBRGGBGBRRGRRGGBBRRRRBRBGBGRBGBBRBBBRRBRGGRGRBGRRGRRGGGRGRRBGRGBBRBRGBRRGGGGGBBGBRBGBGGGGBRGBBRBGGRBGGBBGGGBGRGRGGBRRRGGRBBRBGRRRGRGRRRGBBBGRGRGBBGBRGGGRBBRRBGGGGBBBRBGRGRRBGBBRGBGBRRGBBBRBGGGRGRRGBBGGRBRGGRBRBRRGGBGRBBBGGRGGBBRGBRRRBGBBRBRRRGGBGRRGRGBBGRRRGGRRGGRGRRRRRGGGRRGBRGRRBBRBRRRGBRBRBGRRBRGRRRGRGRBGBRRBRGBRBBRBGRRGBRBBBGBBBGBRGBRGBRRBBRRGGGGBRRRBRGGRBGBGRBRBBRGGGBGGRRBGBBGBBBRRRBGRGGRGGRBGGRRBBBGRRRGRRRBBRRGRRBBBGBGBBRGGRBGGBBGRRRRGRRGGGBRBBBGGGBGGRRBRRRGRBRGBGBGBBRBGRBRRGBBBBRGBBRRBRRRRGGRRRBBGRGBRRGGBRRBRBRBGRGRGGGBBRRRGBBBBBBRRGBRRBRRBGRRGBBGRGRRGGRBGRBGRBBBGGRGGRBGGRBGBGRRBGGGRBGGRBRGBBGRGGBBBGGGBGRGBRBRBRBBRRGRBBBBBRRRBBRBGBGGRBBRRBRBRRBRBGRBGGBRBBRBBRBGBGBRRGBGGBRGGRGRBBBRRGRRRGRRBRGBGRRBBRRRBGGGBRGBRGRRBGGGRBGBBRBRRRRRRRGGBRBBRGBGBRRBBGGBGRBRGBBBRBBRGBBGRBGRRRRRGRRGGBGRBGBGRGRRGGBBRGGRGBGGRGBBGRRGRGGBBGGRBGGBBGBBRGRBRBRGRGRRBRGBBRBBBRRBGBBGGBGGRBRGGBRBRRRRBBBBRGBRGRRRRRBGBGBRRRGBRGBGRRGRBRBRBBRGBGGRBGGBRGRGBGRBGBRBRGBRBBRGBBRBGGRRRGBRRBGBGBGRRBBRGBRRBBBBGBGBBBBBBBGBBRBGRGRRBBRRRBGBGGBBGGBRGGRGGGRGBRBRRBRBRGBGRGGBRRBGGGBRRBGBBBRBRGBRGRBGGRRRGGBGGBRGGRGBGRGRRBRGGBRBBBBGRBGBGBGRBRGRRGBGBBBRBBGRBGBBBGGBBRBRBBGGBRBBBBBGGGGRBBRGBGGGBRGBRGBGRBBBBBBBBGRGGGBRRRBRGGGBGRGRBBGRGGBGGBRGBRBRGBGBRGRGRBGBBRBBBGBRRBBGBBBBRBRGBGGBBBGRBRRBGRRRBBGBRGGRRGBRRBBBGGBGBGBGBRGRRGGBBRBBGRBGGBBRGBBBRRRBGRGGRGBGRRGBRBBGBGRBRRBBBBGRBRGGGRRBGBGBBRBRBBBRGRRRRBBRBBBRBRGRGRRRBGRRRBGBBGRGBRGGRRGRBRGBGRGRRBGRBGGBGBBGGRRGRBBGBRBRBRRGRBBGBRBGBRGBBRGBRGRGGBRRRRGRRRRGBBRGGBRGRGRGBBRRGRBBRBGRRBBRRBRRBRBRGGRGBGBBGRRBRRRGGGBGGBRBGRRRGBBBRBGGRGGBBBRRRRBGBBBRGBRRRRGBRGGGGRRRRBBBGBRGRRBBBRRGRRGGGGRBBBGGGBGGGRGBGGBGBGBBBBGRRRGBGBGGBGRRRGGGBBGGBGGBGRGRBRRRGBRRBBBBRBRRGRBBRBRBRGBGGBRGBRBGGRBRBBRGBGBRGRRGRGBRBGRBRRRGGRBRGBGBBGRBRRRBRGBRBBBBRRBBGGGRGGGRGBRGGRGRRGBBBBRBGBRBRBBGRGBRBGGGGGBBBRRBRRBRBRGGBGGGGGBBBBRGRGRGRRBBBBBRRBRGBGRGRBRBRRBRRBBBGRGGBGGGBRGRBBGGBBGBGGGBBGRRGRRBGBGRGBBRGGRRGRBRBGRBBRGBGRRRRGRBRRRGRRBGBRBGRBGRRBBBBBBGBRBRGRRRRRGBBGRGBRRRBGGRGGRGGRRGBBGRRGGGRRGBBBGBRGRRRGGGBBRGBRBGBGRRGBBBRRBRBRBRBBGRGBBGGRGGRRGRBBGGGGRBBBBGBRRBBGBGGGGRGBGBRRRRBBGBRGGBRGGRGGBBRBGGGRGRBGRGBGGBRRBRGGBBBGBBRRGGBRRGGRBGBRBGBGGBGRRRGRBBBRGRRRBRRBBGRBGBBRGGBRGGGBBRBBBBRRRGRRBBRGGGRBGRGBBRRRRBBRBBRBBGRRBBRBGGGRRBRGRBBBBRRRBRRBBBBRRRRRRGRGRBGGBBBBGGGBGBRGBGGGGRGGGRBGGRRBRRRBBBGBBRGGBGRBRBGGBGRGGRBRGRBGRRRRRBBBRGBRGBBBBGBGBBRGRRGBGRGBGBBGBRBRGGGRGGRRRBGBGBRRRBRBRGGGGGBGGGBGRRGGBBBBGGBGGRGBBBBBRRRBBGGBRGGGBRBBRBBGGBBRBGRRRBBGRGGBBRBBGRRRGGRGGRBRBRRBGGBRRRBGGRRGGGRBGBRRRGGBGBBGBRGGGBGGBGBGGRRBGRBGRRGGGGRRRBBRRRBGBGRBBRGBGGBRRRBRRGBBRRRRGBGGBRRRBRRRBBRRGBGGRBRGRRRGRGGGRRGGRGGRBBGGGGBGGBBBGBRBBBRGRBRBRGRRRBGRGBBRGRGRRGRBBGBBRRRBBGGRBGRRRRGBRGBBBGRRGGRRBBBGBGRBRBBRRGGGGBGBBGBBRRGGGGBGBRBGBRBBBBBBRGGBGBRGGBBRRRBGBRRGRBGBBRBGBGGGBRGBGGRRGBRGRGRRGBBBGRBBGGGGRGRRBGRGRRBGRRRGBGGRRGRRBBRGRBRGRRBGBBBBRGGGRBRBGBGBGGRGBRBBRRGGGGBRGBRBGBG",
]

for q in queries:
    print(triangle(q))
